"""

"""
type Business {
  id: ID!
  ownerId: Int
  owner: User
  businessName: String
  businessType: String
  businessIndustry: String
  businessCategory: String
  address: String
  latitude: Float
  longitude: Float
  representativeTitle: String
  representativeName: String
  phoneNumber: String
  registrationNumber: String
  category: String
  bio: String
  images: [BusinessImage]
  createdAt: DateTime
  updatedAt: DateTime
}

input BusinessCreateInput {
  ownerId: Int!
  businessName: String!
  address: String!
  businessType: String
  businessIndustry: String
  businessCategory: String
  representativeTitle: String
  representativeName: String
  phoneNumber: String
  registrationNumber: String
  category: String
  bio: String
  latitude: Float
  longitude: Float
}

"""

"""
type BusinessImage {
  id: ID!
  businessId: Int!
  fileId: Int!
  sort: Int!
  file: File!
  createdAt: DateTime
  updatedAt: DateTime
}

input BusinessImageInput {
  sort: Int
  file: Upload!
}

input BusinessUpdateInput {
  ownerId: Int
  businessName: String
  businessType: String
  businessIndustry: String
  businessCategory: String
  address: String
  representativeTitle: String
  representativeName: String
  phoneNumber: String
  registrationNumber: String
  category: String
  bio: String
  latitude: Float
  longitude: Float
}

"""
A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar Date

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

type File {
  id: ID!
  name: String
  mimetype: String
  url: String
  path: String
  width: Int
  height: Int
  createdAt: DateTime
  updatedAt: DateTime
}

enum Gender {
  male
  female
}

"""

"""
type Interest {
  id: ID!
  name: String
  categoryId: Int!
  category: InterestCategory
  createdAt: DateTime
  updatedAt: DateTime
}

"""

"""
type InterestCategory {
  id: ID!
  name: String
  interests: [Interest]
  createdAt: DateTime
  updatedAt: DateTime
}

input InterestCategoryInput {
  name: String!
}

input InterestCreateInput {
  categoryId: Int!
  name: String!
}

input InterestUpdateInput {
  categoryId: Int
  name: String
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

type SignInResult {
  sessionToken: String
  user: User
}

input SignUpInput {
  email: String!
  password: String!
  role: UserRole!
}

type SignUpResult {
  confirmationNumber: String!
  emailConfirmationToken: String!
  user: User!
}

"""
File upload type
"""
scalar Upload

"""

"""
type User {
  id: ID!
  email: String
  status: UserStatus
  role: UserRole
  userProfile: UserProfile
  business: Business
  createdAt: DateTime
  updatedAt: DateTime
}

input UserCreateInput {
  email: String!
  password: String!
  role: UserRole
  status: UserStatus
  userProfile: UserProfileCreateInput!
}

"""

"""
type UserProfile {
  id: ID!
  userId: Int!
  name: String
  birthYear: Int
  height: Int
  weight: Int
  mbti: String
  education: String
  occupation: String
  bio: String
  gender: Gender
  images: [UserProfileImage]
  interests: [Interest]
  age: Int
  createdAt: DateTime
  updatedAt: DateTime
}

input UserProfileCreateInput {
  name: String!
  birthYear: Int
  height: Int
  weight: Int
  mbti: String
  education: String
  occupation: String
  bio: String
  gender: Gender
}

"""

"""
type UserProfileImage {
  id: ID!
  profileId: Int!
  fileId: Int!
  sort: Int!
  file: File!
  createdAt: DateTime
  updatedAt: DateTime
}

input UserProfileImageInput {
  sort: Int
  file: Upload!
}

input UserProfileUpdateInput {
  name: String
  birthYear: Int
  height: Int
  weight: Int
  mbti: String
  education: String
  occupation: String
  bio: String
  gender: Gender
  images: [UserProfileImageInput]
}

enum UserRole {
  admin
  business
  user
}

enum UserStatus {
  unverified
  active
  inactive
}

input UserUpdateInput {
  email: String
  password: String
  role: UserRole
  status: UserStatus
}

type Mutation {
  signIn(email: String!, password: String!): SignInResult!
  signInWithGoogle(idToken: String!): SignInResult!
  signUp(data: SignUpInput!): SignUpResult!
  verifyUserEmailResolver(
    userId: ID!
    confirmationNumber: String!
    emailConfirmationToken: String!
  ): Boolean!
  sendUserPasswordResetLink(email: String!): Boolean!
  redeemUserPasswordResetToken(token: String!, password: String!): Boolean!
  upsertMyUserProfile(data: UserProfileUpdateInput!): UserProfile!
  upsertMyBusiness(data: BusinessUpdateInput!): Business!
  uploadMyProfileImage(data: UserProfileImageInput!): UserProfileImage!
  uploadMyProfileImages(data: [UserProfileImageInput!]!): [UserProfileImage]!
  deleteMyProfileImage(id: ID!): UserProfileImage!
  deleteMyAllProfileImages: [ID]!
  connectInterestsToMyProfile(interestIds: [ID!]!): UserProfile!
  disconnectInterestsFromMyProfile(interestIds: [ID!]!): UserProfile!
  createBusiness(data: BusinessCreateInput!): Business!
  updateBusiness(id: ID!, data: BusinessUpdateInput!): Business!
  uploadBusinessImage(
    businessId: ID!
    data: BusinessImageInput!
  ): BusinessImage!
  uploadBusinessImages(
    businessId: ID!
    data: [BusinessImageInput!]!
  ): [BusinessImage!]
  deleteBusinessImage(id: ID!): BusinessImage!
  deleteAllBusinessImages(businessId: ID!): [ID!]
  uploadBusinessRegistrationFile(businessId: ID!, file: Upload!): File!
  createInterestCategory(data: InterestCategoryInput!): InterestCategory!
  updateInterestCategory(
    id: ID!
    data: InterestCategoryInput!
  ): InterestCategory!
  deleteInterestCategory(id: ID!): InterestCategory!
  createInterest(data: InterestCreateInput!): Interest!
  updateInterest(id: ID!, data: InterestUpdateInput!): Interest!
  deleteInterest(id: ID!): Interest!
  createUser(data: UserCreateInput!): User!
  updateUser(id: ID!, data: UserUpdateInput!): User!
  tempDeleteUserResolver(id: ID!): User!
  updateUserProfile(id: ID!, data: UserProfileUpdateInput!): UserProfile!
  connectInterestsToUserProfile(
    userProfileId: ID!
    interestIds: [ID!]!
  ): UserProfile!
  disconnectInterestsFromUserProfile(
    userProfileId: ID!
    interestIds: [ID!]!
  ): UserProfile!
}

type Query {
  authenticatedUser: User
  businesses: [Business]!
  business(id: ID!): Business!
  interestCategories: [InterestCategory]!
  interestCategory(id: ID!): InterestCategory!
  interests: [Interest]!
  interest(id: ID!): Interest!
  users: [User]!
  user(id: ID!): User!
  userProfiles(role: UserRole): [UserProfile]!
  userProfile(id: ID!): UserProfile!
}
