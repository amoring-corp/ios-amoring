"""

"""
type Business {
  id: ID!
  ownerId: String
  owner: User
  businessName: String
  businessType: String
  businessIndustry: String
  businessCategory: String
  address: String
  addressJibun: String
  addressSido: String
  addressSigungu: String
  addressSigunguCode: String
  addressSigunguEnglish: String
  addressBname: String
  addressZonecode: String
  addressDetails: String
  latitude: Float
  longitude: Float
  representativeTitle: String
  representativeName: String
  phoneNumber: String
  registrationNumber: String
  category: String
  bio: String
  images(take: Int, skip: Int): [BusinessImage]
  businessHours: [BusinessHours]
  activeCheckIns(take: Int, skip: Int, gender: Gender): [CheckIn]!
  createdAt: DateTime
  updatedAt: DateTime
}

input BusinessCreateInput {
  ownerId: String!
  businessName: String!
  address: String!
  addressJibun: String
  addressSido: String!
  addressSigungu: String!
  addressSigunguCode: String!
  addressSigunguEnglish: String!
  addressBname: String
  addressZonecode: String
  addressDetails: String
  businessType: String
  businessIndustry: String
  businessCategory: String
  representativeTitle: String
  representativeName: String
  phoneNumber: String
  registrationNumber: String
  category: String
  bio: String
  latitude: Float
  longitude: Float
}

"""

"""
type BusinessHours {
  id: ID!
  day: Day!
  openAt: LocalTime!
  closeAt: LocalTime!
  createdAt: DateTime
  updatedAt: DateTime
}

input BusinessHoursInput {
  day: Day!
  openAt: LocalTime!
  closeAt: LocalTime!
}

"""

"""
type BusinessImage {
  id: ID!
  businessId: String!
  fileId: String!
  sort: Int!
  file: File!
  createdAt: DateTime
  updatedAt: DateTime
}

input BusinessImageInput {
  sort: Int
  file: Upload!
}

input BusinessUpdateInput {
  ownerId: String
  businessName: String
  businessType: String
  businessIndustry: String
  businessCategory: String
  address: String
  addressJibun: String
  addressSido: String
  addressSigungu: String
  addressSigunguCode: String
  addressSigunguEnglish: String
  addressBname: String
  addressZonecode: String
  addressDetails: String
  representativeTitle: String
  representativeName: String
  phoneNumber: String
  registrationNumber: String
  category: String
  bio: String
  latitude: Float
  longitude: Float
}

"""

"""
type CheckIn {
  id: ID!
  businessId: String!
  business: Business
  profileId: String!
  profile: Profile
  status: CheckInStatus!
  checkedInAt: DateTime
  checkedOutAt: DateTime
  createdAt: DateTime!
  updatedAt: DateTime!
}

enum CheckInStatus {
  pending
  confirmed
  rejected
}

"""

"""
type CheckInToken {
  token: String!
  createdAt: DateTime!
  expiresAt: DateTime!
}

type Conversation {
  id: ID!
  status: ConversationStatus!
  participants: [User]!
  messages(take: Int = 10, skip: Int = 0): [Message]!
  createdAt: DateTime
  archivedAt: DateTime
  deletedAt: DateTime
  updatedAt: DateTime
}

enum ConversationStatus {
  active
  archived
}

"""
A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar Date

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

enum Day {
  sunday
  monday
  tuesday
  wednesday
  thursday
  friday
  saturday
}

type File {
  id: ID!
  name: String
  mimetype: String
  url: String
  path: String
  width: Int
  height: Int
  createdAt: DateTime
  updatedAt: DateTime
}

enum Gender {
  male
  female
}

"""

"""
type Interest {
  id: ID!
  name: String
  categoryId: String!
  category: InterestCategory
  createdAt: DateTime
  updatedAt: DateTime
}

"""

"""
type InterestCategory {
  id: ID!
  name: String
  interests: [Interest]
  createdAt: DateTime
  updatedAt: DateTime
}

input InterestCategoryInput {
  name: String!
}

input InterestCreateInput {
  categoryId: String!
  name: String!
}

input InterestUpdateInput {
  categoryId: String
  name: String
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

"""
A local time string (i.e., with no associated timezone) in 24-hr `HH:mm[:ss[.SSS]]` format, e.g. `14:25` or `14:25:06` or `14:25:06.123`.
"""
scalar LocalTime

input MakeReportInput {
  email: String
  subject: String
  body: String
  type: ReportType
}

type Message {
  id: ID!
  body: String!
  senderId: String
  sender: User
  conversationId: String
  conversation: Conversation
  createdAt: DateTime
  updatedAt: DateTime
}

type Notification {
  id: ID!
  message: Message
}

"""

"""
type Profile {
  id: ID!
  userId: String!
  name: String
  birthYear: Int
  height: Int
  weight: Int
  mbti: String
  education: String
  occupation: String
  bio: String
  gender: Gender
  images: [ProfileImage]
  interests: [Interest]
  age: Int
  activeCheckIn: CheckIn
  isOnline: Boolean!
  createdAt: DateTime
  updatedAt: DateTime
}

input ProfileCreateInput {
  name: String!
  birthYear: Int
  height: Int
  weight: Int
  mbti: String
  education: String
  occupation: String
  bio: String
  gender: Gender
}

"""

"""
type ProfileImage {
  id: ID!
  profileId: String!
  fileId: String!
  sort: Int!
  file: File!
  createdAt: DateTime
  updatedAt: DateTime
}

input ProfileImageInput {
  sort: Int
  file: Upload!
}

input ProfileUpdateInput {
  name: String
  birthYear: Int
  height: Int
  weight: Int
  mbti: String
  education: String
  occupation: String
  bio: String
  gender: Gender
  images: [ProfileImageInput]
}

type Reaction {
  id: ID!
  byProfileId: String!
  byProfile: Profile!
  toProfileId: String!
  toProfile: Profile!
  type: ReactionType!
  matchedWithId: String
  isMatched: Boolean
  createdAt: DateTime!
  updatedAt: DateTime!
}

enum ReactionType {
  like
  dislike
}

"""

"""
type Report {
  id: ID!
  byUserId: String!
  email: String
  subject: String
  body: String
  type: ReportType
  byUser: User!
  createdAt: DateTime
  updatedAt: DateTime
}

enum ReportType {
  inquiry
  report
}

type SignInResult {
  sessionToken: String
  user: User
}

input SignUpInput {
  email: String!
  password: String!
  role: UserRole!
}

type SignUpResult {
  confirmationNumber: String!
  emailConfirmationToken: String!
  user: User!
}

"""
File upload type
"""
scalar Upload

"""

"""
type User {
  id: ID!
  email: String
  status: UserStatus
  role: UserRole
  profile: Profile
  business: Business
  createdAt: DateTime
  updatedAt: DateTime
}

input UserCreateInput {
  email: String!
  password: String!
  role: UserRole
  status: UserStatus
  profile: ProfileCreateInput!
}

type UserDevice {
  id: ID!
  deviceToken: String!
  deviceOs: String
  userId: String!
  user: User!
  createdAt: DateTime
  updatedAt: DateTime
}

enum UserRole {
  admin
  business
  user
}

enum UserStatus {
  unverified
  active
  inactive
}

input UserUpdateInput {
  email: String
  password: String
  role: UserRole
  status: UserStatus
}

type Mutation {
  signIn(email: String!, password: String!): SignInResult!
  anySignIn(email: String!): SignInResult!
  validateMyPassword(password: String!): Boolean!
  signInWithGoogle(idToken: String!): SignInResult!
  signUp(data: SignUpInput!): SignUpResult!
  verifyUserEmail(
    userId: ID!
    confirmationNumber: String!
    emailConfirmationToken: String!
  ): Boolean!
  sendUserPasswordResetLink(email: String!): Boolean!
  redeemUserPasswordResetToken(token: String!, password: String!): Boolean!
  upsertMyProfile(data: ProfileUpdateInput!): Profile!
  upsertMyBusiness(data: BusinessUpdateInput!): Business!
  uploadMyProfileImage(data: ProfileImageInput!): ProfileImage!
  uploadMyProfileImages(data: [ProfileImageInput!]!): [ProfileImage]!
  deleteMyProfileImage(id: ID!): ProfileImage!
  deleteMyAllProfileImages: [ID]!
  connectInterestsToMyProfile(interestIds: [ID!]!): Profile!
  disconnectInterestsFromMyProfile(interestIds: [ID!]!): Profile!
  createBusiness(data: BusinessCreateInput!): Business!
  updateBusiness(id: ID!, data: BusinessUpdateInput!): Business!
  uploadBusinessImage(
    businessId: ID!
    data: BusinessImageInput!
  ): BusinessImage!
  uploadBusinessImages(
    businessId: ID!
    data: [BusinessImageInput!]!
  ): [BusinessImage!]
  deleteBusinessImage(id: ID!): BusinessImage!
  deleteAllBusinessImages(businessId: ID!): [ID!]
  uploadBusinessRegistrationFile(businessId: ID!, file: Upload!): File!
  generateCheckInToken: CheckInToken!
  createCheckInByToken(token: String!): CheckIn
  updateCheckInStatus(id: ID!, status: CheckInStatus!): CheckIn
  checkOutFromActive: CheckIn
  deleteConversation(id: ID!): Conversation!
  reportConversation(id: ID!): Conversation!
  upsertUserDevice(deviceToken: String!, deviceOs: String): UserDevice
  createInterestCategory(data: InterestCategoryInput!): InterestCategory!
  updateInterestCategory(
    id: ID!
    data: InterestCategoryInput!
  ): InterestCategory!
  deleteInterestCategory(id: ID!): InterestCategory!
  createInterest(data: InterestCreateInput!): Interest!
  updateInterest(id: ID!, data: InterestUpdateInput!): Interest!
  deleteInterest(id: ID!): Interest!
  sendMessage(body: String!, conversationId: ID!): Message!
  sendNotification: Boolean!
  batchUpsertBusinessHours(
    businessId: ID!
    data: [BusinessHoursInput!]!
  ): [BusinessHours]!
  upsertBusinessHours(
    businessId: ID!
    data: BusinessHoursInput!
  ): BusinessHours!
  deleteBusinessHours(businessId: ID!, day: Day!): ID!
  deleteAllBusinessHours(businessId: ID!): Int!

  """
  React to a profile by authenticated user
  """
  reactToProfile(profileId: String!, type: ReactionType!): Reaction
  makeReport(data: MakeReportInput!): Report!
  createUser(data: UserCreateInput!): User!
  updateUser(id: ID!, data: UserUpdateInput!): User!
  tempDeleteUserResolver(id: ID!): User!
  updateProfile(id: ID!, data: ProfileUpdateInput!): Profile!
  connectInterestsToProfile(profileId: ID!, interestIds: [ID!]!): Profile!
  disconnectInterestsFromProfile(profileId: ID!, interestIds: [ID!]!): Profile!
}

type Query {
  authenticatedUser: User
  businesses: [Business!]!
  business(id: ID!): Business
  activeCheckIn: CheckIn
  conversations: [Conversation!]!
  conversation(id: ID!): Conversation
  interestCategories: [InterestCategory]!
  interestCategory(id: ID!): InterestCategory!
  interests: [Interest]!
  interest(id: ID!): Interest!
  businessHours(businessId: ID!): [BusinessHours]!
  users: [User]!
  user(id: ID!): User!
  profiles(role: UserRole): [Profile]!
  profile(id: ID!): Profile!
}

type Subscription {
  notificationPushed: Notification
}
