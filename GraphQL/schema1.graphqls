### This file was generated by Nexus Schema
### Do not make changes to this file directly


""""""
type Business {
  address: String
  businessName: String
  createdAt: DateTime
  id: ID!
  owner: User
  ownerId: Int
  phoneNumber: String
  registrationNumber: String
  representativeName: String
  representativeTitle: String
  updatedAt: DateTime
}

input BusinessCreateInput {
  address: String!
  businessName: String!
  ownerId: Int!
  phoneNumber: String
  registrationNumber: String
  representativeName: String
  representativeTitle: String
}

input BusinessUpdateInput {
  address: String
  businessName: String
  ownerId: Int
  phoneNumber: String
  registrationNumber: String
  representativeName: String
  representativeTitle: String
}

"""
A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar Date

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

enum GenderType {
  female
  male
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createBusiness(data: BusinessCreateInput!): Business!
  createUser(data: UserCreateInput!): User!
  redeemUserPasswordResetToken(password: String!, token: String!): Boolean!
  sendUserPasswordResetLink(email: String!): Boolean!
  signIn(email: String!, password: String!): SignInResult!
  signUp(data: SignUpInput!): User!
  updateBusiness(data: BusinessUpdateInput!, id: ID!): Business!
  updateUser(data: UserUpdateInput!, id: ID!): User!
  updateUserProfile(data: UserProfileUpdateInput!, id: ID!): UserProfile!
}

type Query {
  authenticatedUser: User
  business(id: ID!): Business!
  businesses: [Business]!
  user(id: ID!): User!
  users: [User]!
}

type SignInResult {
  sessionToken: String
  user: User
}

input SignUpInput {
  email: String!
  password: String!
}

""""""
type User {
  business: Business
  createdAt: DateTime
  email: String
  id: ID!
  role: UserRoleType
  status: UserStatusType
  updatedAt: DateTime
  userProfile: UserProfile
}

input UserCreateInput {
  email: String!
  password: String!
  role: UserRoleType
  status: UserStatusType
  userProfile: UserProfileCreateInput!
}

""""""
type UserProfile {
  age: Int
  bio: String
  createdAt: DateTime
  gender: GenderType
  id: ID!
  name: String
  updatedAt: DateTime
  userId: Int!
}

input UserProfileCreateInput {
  age: Int
  bio: String
  gender: GenderType
  name: String!
}

input UserProfileUpdateInput {
  age: Int
  bio: String
  gender: GenderType
  name: String
}

enum UserRoleType {
  admin
  business
  user
}

enum UserStatusType {
  active
  inactive
  unverified
}

input UserUpdateInput {
  email: String
  password: String
  role: UserRoleType
  status: UserStatusType
}